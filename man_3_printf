_printf() - Owr function manual

NAME

	_printf - formatted output conversion

SYNOPSIS

	#include "main.h"
	
	int _printf(const char *restrict format, ...);

DESCRIPTION

	_printf  write output under the control of a
      format string that specifies how subsequent arguments
	are converted for output. Format and argument are given 
	like parameters in the function

	Format of the format string
       The format string is a character string, beginning and ending in
       its initial shift state, if any.  The format string is composed
       of zero or more directives: ordinary characters (not %), which
       are copied unchanged to the output stream; and conversion
       specifications, each of which results in fetching zero or more
       subsequent arguments.  Each conversion specification is
       introduced by the character %, and ends with a conversion
       specifier.  In between there may be (in this order) zero or more
       flags, an optional minimum field width, an optional precision and
       an optional length modifier.

	c - print a character

	s - print a string

	% - print a '%'	

	d - print an integer in base 10 (decimal)

	i - print an integer

	b - print an unsigned integer in binary 

	u - print an unsigned integer	

	o - print an unsigned integer in base 8 (octal)

	x - print an unsigned integer in base 16 with the letters in lowercase (hexadecimal)
 
	X - print an unsigned integer in base 16 with the letters in uppercase (HEXADECIMAL)

	S - print a string, but not print characters between ASCII higher than 0 and lower than 32, and ASCII equal or higher than 127, are printed like \x, followed by the ASCII code value in hexadecimal (upper case - always 2 characters)

	p - print the address of the argument

	r - print a string in reverse

	R - print a string encoded in rot13

	flag characters for non-custom conversion specifiers
	
	+

	space

	#

EXAMPLES
	
	To print a char, like m
	
	#include "main.h"
	_printf("Print a char: %c\n", arg);

	To print a string, like "Cohort 17"
	_printf("Cohort 17\n");

	or
	_printf("%s", "Cohort 17\n");

	To print a % symbol
	_printf("%%\n");

	To print an integer in base 10 (decimal)
	_printf("%d\n", arg);

	To print an integer
	_printf("%i\n", arg);

	To print an unsigned integer
	_printf("%u\n", arg);

	To print an unsigned integer in octal
	_printf("%o\n", arg);

	To print an unsigned integer in hexadecimal
	_printf("%x\n", arg);

	To print an unsigned integer in HEXADECIMAL
	_printf("%X\n", arg);

	To print the address of the argument
	_printf("%p\n", arg);

EXIT VALUES
	-1 - Error

AUTHORS
	maurolabella - Mauro Labella
	ajsabini - Alvaro Sabini
i
